name: PR CI/CD Workflow

on:
  pull_request:
    branches: [main]

jobs:
  validate:
    name: Lint, Test & Terraform Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Lint (flake8)
        run: flake8 .

      - name: Unit Tests (pytest)
        run: pytest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

  build-and-deploy:
    name: Build Docker & Deploy to ECS (Non-Prod)
    runs-on: ubuntu-latest
    needs: validate
    environment: non-prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Gemini scan
        run: |
          CODE=$(find . -name "*.tf" -exec cat {} + | base64 -w 0)

          # Simulate sending to a Gemini-like API endpoint
          RESPONSE=$(curl -s -X POST "https://api.mock-gemini.com/v1/security/scan" \
            -H "Authorization: Bearer $GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "language": "terraform",
              "code": "'"$CODE"'"
            }')

          # Simulate parsing the response (adjust if actual API differs)
          echo "## 🔐 Security Report" > security-report.md
          echo "" >> security-report.md
          echo "**Findings:**" >> security-report.md
          echo "$RESPONSE" | jq -r '.findings[] | "- \(.severity) \(.message)"' >> security-report.md
          echo "" >> security-report.md
          echo "_Generated by: Google Gemini Security Scanner (mocked)_" >> security-report.md

      - name: Terraform Plan & Apply (Non-Prod Workspace)
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}"
          terraform workspace select non-prod || terraform workspace new non-prod
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        id: vars
        run: echo "tag=pr-${{ github.event.pull_request.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image to ECR
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ steps.vars.outputs.tag }}"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
        env:
          DOCKER_BUILDKIT: 1

      - name: Update ECS Task Definition
        id: task-def
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ steps.vars.outputs.tag }}"
          sed "s|<IMAGE_URI>|$IMAGE_URI|g" ${{ secrets.ECS_TASK_DEF_TEMPLATE_PATH }} > task-def-updated.json
          echo "task-def=$(cat task-def-updated.json | jq -r .family)" >> $GITHUB_OUTPUT

      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-def-updated.json

      - name: Deploy to ECS (Rolling Update)
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment

